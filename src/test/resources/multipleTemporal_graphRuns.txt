(with sat-run-A
(configure :bitwidth 4 :solver SAT4J :max-solutions 1 :verbosity 1 :skolem-depth 0 :sb 20 :core-gran 0 :core-minimization fast :log-trans 0 :min-trace-length 1 :max-trace-length 5)
(univ 24)
(ints [(-8 0)(-7 1)(-6 2)(-5 3)(-4 4)(-3 5)(-2 6)(-1 7)(0 8)(1 9)(2 10)(3 11)(4 12)(5 13)(6 14)(7 15)])
(r:Int [{(0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15)} :: {(0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15)}])
(r:A [none :: {(16) (17) (18) (19)}])
(r:B [none :: {(20) (21) (22) (23)}])
(r:succ [{(0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10 11) (11 12) (12 13) (13 14) (14 15)} :: {(0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10 11) (11 12) (12 13) (13 14) (14 15)}])
(f:0 (some r:A ))
(assert f:0)
(f:1 (no r:B ))
(assert f:1)
(f:2 (always (in r:succ (-> r:Int r:Int ))))
(assert f:2)
)**EOI**
(with sat-run-B
(configure :bitwidth 4 :solver SAT4J :max-solutions 1 :verbosity 1 :skolem-depth 0 :sb 20 :core-gran 0 :core-minimization fast :log-trans 0 :min-trace-length 1 :max-trace-length 5)
(univ 24)
(ints [(-8 0)(-7 1)(-6 2)(-5 3)(-4 4)(-3 5)(-2 6)(-1 7)(0 8)(1 9)(2 10)(3 11)(4 12)(5 13)(6 14)(7 15)])
(r:Int [{(0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15)} :: {(0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15)}])
(r:A [none :: {(16) (17) (18) (19)}])
(r:B [none :: {(20) (21) (22) (23)}])
(r:succ [{(0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10 11) (11 12) (12 13) (13 14) (14 15)} :: {(0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10 11) (11 12) (12 13) (13 14) (14 15)}])
(f:0 (some r:B ))
(assert f:0)
(f:1 (no r:A ))
(assert f:1)
(f:2 (always (in r:succ (-> r:Int r:Int ))))
(assert f:2)
)**EOI**
(with unsat-run
(configure :bitwidth 4 :solver SAT4J :max-solutions 1 :verbosity 1 :skolem-depth 0 :sb 20 :core-gran 0 :core-minimization fast :log-trans 0 :min-trace-length 1 :max-trace-length 5)
(univ 24)
(ints [(-8 0)(-7 1)(-6 2)(-5 3)(-4 4)(-3 5)(-2 6)(-1 7)(0 8)(1 9)(2 10)(3 11)(4 12)(5 13)(6 14)(7 15)])
(r:Int [{(0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15)} :: {(0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15)}])
(r:A [none :: {(16) (17) (18) (19)}])
(r:B [none :: {(20) (21) (22) (23)}])
(r:succ [{(0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10 11) (11 12) (12 13) (13 14) (14 15)} :: {(0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10 11) (11 12) (12 13) (13 14) (14 15)}])
(f:0 (some r:A ))
(assert f:0)
(f:1 (some r:B ))
(assert f:1)
(f:2 (= r:A r:B ))
(assert f:2)
(f:3 (always (in r:succ (-> r:Int r:Int ))))
(assert f:3)
)**EOI**
(with sat-run-A (solve start))**EOI**
(with sat-run-B (solve start))**EOI**
(with unsat-run (solve start))**EOI**
(with sat-run-A (solve next))**EOI**